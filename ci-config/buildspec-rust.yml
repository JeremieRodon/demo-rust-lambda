version: 0.2

env:
  variables:
    RUST_VERSION: "1.79.0"
    RUST_TARGET_ARCH: "aarch64-unknown-linux-gnu"

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo Entered the install phase on `date`
      - |
        echo Remove rust-toolchain.toml
        rm rust-toolchain.toml
        echo Installing Rust $RUST_VERSION
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain none --profile minimal
        export PATH="/root/.cargo/bin:$PATH"
        rustup toolchain install $RUST_VERSION
        rustup default $RUST_VERSION
        pip3 install cargo-lambda
    finally:
      - |
        echo Changing all file times to 2010-01-01 00:00:00 \(arbitrary\) to avoid inducing changes in ZIP packages
        find . -not -path '*/.git/*' -exec touch -a -m -t"201001010000.00" {} \;
      - echo Exiting the install phase on `date`
  pre_build:
    on-failure: ABORT
    commands:
      - echo Entered the pre_build phase on `date`
      ##################
      # RUST PRE-BUILD #
      ##################
      # Declare the paths where we store our lambdas and libs
      - |
        RUST_LIB_PATH=./rust/libs
        RUST_LAMBDA_PATH=./rust/lambdas
      # We verify if we changed Rust version since the last build by comparing the current version
      # with the one stored in cache (if any). If we have changed Rust version, we clean every
      # build artifacts. As we don't want to change the Cargo.lock that fixes packages versions,
      # we save it before cleaning and restore it after.
      # In the following section, we compute MD5sums for each folder under the lib and lambda path
      # For each lib/lambda, if it has changed compared to the previous build, we add it to the "to clean" list
      # Then we compare the Cargo.lock of the previous build we the current one, looking for packages
      # that disappeared and adding them to the "to clean" list if needed
      # In the end, we clean every build artifacts for the packages in the "to clean" list.
      # As previously, we protect the Cargo.lock, because we want to use exactly the commited one in the
      # build stage.
      - |
        echo Cleaning targets cache if necessary
        declare -A PACKAGES_TO_CLEAN
        echo Creating the rust_target_md5sum if needed
        if ! [ -d rust_target_md5sum ] ; then mkdir rust_target_md5sum ; fi
        echo Selectively clean-up LIB artifacts if code has changed
        for LIB in $(ls $RUST_LIB_PATH) ; do
          echo Control MD5 for $RUST_LIB_PATH/$LIB
          cd $RUST_LIB_PATH/$LIB
          current_md5=$(find . | sort | zip -@ - | md5sum | cut -f1 -d" ")
          cd $CODEBUILD_SRC_DIR
          if ! previous_md5=$(cat rust_target_md5sum/$LIB 2>/dev/null) || [ "$previous_md5" != "$current_md5" ] ; then
            echo previous_md5=$previous_md5 current_md5=$current_md5 =\> Clean lib $LIB and updating md5sum
            PACKAGES_TO_CLEAN+=([$LIB]=1)
            echo $current_md5 > rust_target_md5sum/$LIB
          fi
        done
        echo Selectively clean-up LAMBDA artifacts if code has changed
        for LAMBDA in $(ls $RUST_LAMBDA_PATH) ; do
          echo Control MD5 for $RUST_LAMBDA_PATH/$LAMBDA
          cd $RUST_LAMBDA_PATH/$LAMBDA
          current_md5=$(find . | sort | zip -@ - | md5sum | cut -f1 -d" ")
          cd $CODEBUILD_SRC_DIR
          if ! previous_md5=$(cat rust_target_md5sum/$LAMBDA 2>/dev/null) || [ "$previous_md5" != "$current_md5" ] ; then
            echo previous_md5=$previous_md5 current_md5=$current_md5 => Clean lambda $LAMBDA and updating md5sum
            PACKAGES_TO_CLEAN+=([$LAMBDA]=1)
            echo $current_md5 > rust_target_md5sum/$LAMBDA
          fi
        done
        # Only execute this section if there is a previous Cargo.lock
        if [ -f Cargo.lock.old ] ; then
          echo "Cargo.lock from the previous build found, restoring it"
          mv Cargo.lock Cargo.lock.new
          cp Cargo.lock.old Cargo.lock
          echo Building the current packages set from the current Cargo.lock...
          declare -A CURRENT_PACKAGES
          for p in $(perl -0pe 's/^.*?(\[\[package\]\]\nname = "(\S+)"\nversion = "(\S+)".*?\n)+$/\2@\3\n/gms' < Cargo.lock.new) ; do
            CURRENT_PACKAGES+=([$p]=1)
          done
          echo Current package set contains ${#CURRENT_PACKAGES[@]} packages.
          echo Finding all packages that are no longer needed...
          # For each 'package' in the old Cargo.lock
          count=0
          for p in $(perl -0pe 's/^.*?(\[\[package\]\]\nname = "(\S+)"\nversion = "(\S+)".*?\n)+$/\2@\3\n/gms' < Cargo.lock.old) ; do
            count=$(( $count + 1 ))
            # If 'package' is not in the current Cargo.lock
            if ! [[ ${CURRENT_PACKAGES[$p]} -eq 1 ]]; then
              package_without_version=$(cut -f1 -d'@' <<< $p)
              PACKAGES_TO_CLEAN+=([$package_without_version]=1)
              echo "$p and its dependencies will be cleaned"
              for ptc in $(cargo tree --prefix none -e normal,build --target all --invert $p | sed -r 's/^(\S+).*$/\1/'); do
                PACKAGES_TO_CLEAN+=([$ptc]=1)
              done
            fi
          done
          echo Old package set contains $count packages.
        fi
        # Save the Cargo.lock
        cp Cargo.lock Cargo.lock.back
        echo Attempting to clean ${#PACKAGES_TO_CLEAN[@]} packages out of the cache...
        SORTED_PACKAGES_TO_CLEAN=$(echo ${!PACKAGES_TO_CLEAN[@]} | xargs -n1 | sort | xargs)
        for package in $SORTED_PACKAGES_TO_CLEAN; do
          echo Cleaning $package
          cargo clean --target $RUST_TARGET_ARCH --release --package $package
        done
        # Restore the Cargo.lock in case it has been modified by cargo clean
        mv Cargo.lock.back Cargo.lock
        # Only execute this section if there is a previous Cargo.lock
        if [ -f Cargo.lock.old ] ; then
          echo "Restoring Cargo.lock to its current commited version"
          rm -f Cargo.lock
          mv Cargo.lock.new Cargo.lock
        fi
      - |
        echo Saving the current Cargo.lock as Cargo.lock.old for future builds
        cp Cargo.lock Cargo.lock.old
    finally:
      - echo Exiting the pre_build phase on `date`
  build:
    on-failure: ABORT
    commands:
      - echo Entered the build phase on `date`
      - |
        echo Composing the release build command...
        CMD="cargo lambda build --release --target $RUST_TARGET_ARCH"
        for LAMBDA in $(ls $RUST_LAMBDA_PATH) ; do
          echo Will build $LAMBDA
          CMD="$CMD --package $LAMBDA"
        done
        echo $CMD
        eval $CMD
      - |
        echo Packaging lambdas...
        for LAMBDA in $(ls $RUST_LAMBDA_PATH) ; do
          echo Preping: $LAMBDA
          # Remove all content
          rm -rf $RUST_LAMBDA_PATH/$LAMBDA/*
          # Move the compiled binary into the Lambda folder
          mv ./target/lambda/$LAMBDA/bootstrap $RUST_LAMBDA_PATH/$LAMBDA/bootstrap
        done
    finally:
      - |
        echo Changing all file times to 2010-01-01 00:00:00 \(arbitrary\) to avoid inducing changes in ZIP packages
        find . -not -path '*/.git/*' -exec touch -a -m -t"201001010000.00" {} \;
      - echo Exiting the build phase on `date`
  post_build:
    commands:
      - echo Entered the post_build phase on `date`
      - |
        echo Soft-link lambda folders
        mkdir lambdas
        ORIG_LAMBDA_FOLDER=$CODEBUILD_SRC_DIR/rust/lambdas
        cd lambdas
        for LAMBDA_FOLDER in $(ls $ORIG_LAMBDA_FOLDER) ; do
          echo Soft-link ./lambdas/$LAMBDA_FOLDER to $ORIG_LAMBDA_FOLDER/$LAMBDA_FOLDER
          ln -s $ORIG_LAMBDA_FOLDER/$LAMBDA_FOLDER $LAMBDA_FOLDER
        done
        cd $CODEBUILD_SRC_DIR
      - |
        echo Packaging the demo-template file references...
        mv demo-template.yml demo-template.yml.bak
        aws cloudformation package --template-file demo-template.yml.bak --s3-bucket $ARTIFACT_BUCKET --s3-prefix templates --output-template-file demo-template.yml
    finally:
      - echo Exiting the post_build phase on `date`
artifacts:
  base-directory: .
  files:
    - demo-template.yml
cache:
  paths:
    - target/**/* # Rust workspace target directory
    - rust_target_md5sum/**/* # Where we store md5sum for code
    - Cargo.lock.old # The last seen Cargo.lock
    - previous_build_rust_version # The last seen Rust toolchain version
